import os
import json
from discord.ext import commands
from solana.rpc.api import Client
from solana.transaction import Transaction, TransferParams
from solana.keypair import Keypair
from solana.publickey import PublicKey
from solana.system_program import transfer
from dotenv import load_dotenv
from anchorpy import Provider, Program, Wallet

# Load environment variables
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
PRIVATE_KEY = os.getenv("PRIVATE_KEY")

# Solana client setup
SOLANA_RPC = "https://api.devnet.solana.com"  # Use "https://api.mainnet-beta.solana.com" for mainnet
solana_client = Client(SOLANA_RPC)

# Load your program ID and IDL
PROGRAM_ID = "YourProgramPublicKeyHere"
PROGRAM_IDL_PATH = "./endless_legends_idl.json"  # Replace with your program's IDL file

# Payment settings
MINT_PRICE_SOL = 0.01  # Price in SOL to mint an NFT
BOT_WALLET = Keypair.from_secret_key(bytes(json.loads(PRIVATE_KEY)))

# Anchor setup
provider = Provider(solana_client, Wallet(BOT_WALLET))
program = Program.from_file(PROGRAM_IDL_PATH, PublicKey(PROGRAM_ID), provider)

# Discord bot setup
bot = commands.Bot(command_prefix="!")

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")

@bot.command()
async def mint(ctx, name: str, attack: int, hp: int):
    """
    Mint an NFT after verifying payment.
    """
    try:
        # Step 1: Verify payment
        user_wallet = ctx.message.content.split()[-1]  # User wallet address is provided at the end
        user_balance = solana_client.get_balance(PublicKey(user_wallet))["result"]["value"]

        # Check if the user has paid enough SOL
        required_lamports = int(MINT_PRICE_SOL * 10**9)  # Convert SOL to lamports
        if user_balance < required_lamports:
            await ctx.send(f"Insufficient payment. Send {MINT_PRICE_SOL} SOL to the bot wallet: {BOT_WALLET.public_key}")
            return

        # Step 2: Mint the NFT
        metadata = {
            "name": name,
            "symbol": "ENDLESS",
            "uri": f"https://your-metadata-hosting.com/{name}.json",
            "attack": attack,
            "hp": hp,
        }

        tx = await program.rpc["mint_nft"](
            name,
            "ENDLESS",
            metadata["uri"],
            attack,
            hp,
            ctx=program.accounts(
                mint=BOT_WALLET.public_key,
                mint_authority=BOT_WALLET.public_key,
                payer=BOT_WALLET.public_key,
                metadata=PublicKey("YourMetadataAccountPublicKeyHere"),
                token_metadata_program=PublicKey("MetaPlexTokenMetadataProgramIDHere"),
            ),
        )

        # Step 3: Send confirmation
        await ctx.send(f"NFT minted successfully! Transaction: {tx}")
    except Exception as e:
        print(e)
        await ctx.send(f"Failed to mint NFT: {str(e)}")

@bot.command()
async def balance(ctx):
    """
    Command to check the bot wallet balance.
    """
    try:
        balance = solana_client.get_balance(BOT_WALLET.public_key)["result"]["value"]
        sol_balance = balance / 10**9  # Convert lamports to SOL
        await ctx.send(f"Bot wallet balance: {sol_balance} SOL")
    except Exception as e:
        print(e)
        await ctx.send(f"Failed to retrieve balance: {str(e)}")

@bot.command()
async def helpme(ctx):
    """
    Display help information.
    """
    commands = """
    **Commands:**
    `!mint <name> <attack> <hp> <wallet_address>` - Mint an NFT after paying the required amount.
    `!balance` - Check the bot wallet balance.
    """
    await ctx.send(commands)

# Run the bot
bot.run(DISCORD_TOKEN)
